1 GOTO65000'

        * SH/BAS -- 
                      APR 17, 20/23 *

        FAST SYSTEM ROUTINES (10..9990):

        INPUT ROUTINES:

	           "FAST" BYTE-STREAM KBD GETC()

1900 FORX5%=0TO1STEP0:X9$=INKEY$:IFLEN(X9$)>0THENVR$(0)=X9$:X5%=1
1902 NEXT:RETURN'

        GETC()

2000 VR%(0)=0:X9%=VA%(0):IFX9%<1THEN2050
2002 IFNOTSY%(X9%,1)=4RETURN
2004 IFNOTSY%(4,0)THEN2020'

        DISK GETC():
                A. BYTE-STREAM:
2006 VR%(0)=SY!(X9%,0)<SY!(X9%,2):IFNOTVR%(0)RETURN
2008 IFSY%(X9%,2)=256THENX9!=SY!(X9%,1):GETX9%,X9!:SY%(X9%,2)=0:SY!(X9%,1)=X9!+1:GOTO2006
2010 X8%=SY%(X9%,2):FIELDX9%,X8%ASX9$,1ASVR$(0):SY%(X9%,2)=X8%+1:SY!(X9%,0)=SY!(X9%,0)+1:RETURN'
                B. TEXT-STREAM:
2020 VR%(0)=0:X9%=VA%(0)
2022 X9$=SY$(X9%,1):IFNOTSY%(X9%,2)>LEN(X9$)THEN2030
2024 IFEOF(X9%)RETURN
2026 LINEINPUT#X9%,X9$:SY$(X9%,1)=X9$+CHR$(13):SY%(X9%,2)=1:GOTO2022
2030 VR$(0)=MID$(X9$,SY%(X9%,2),1):SY%(X9%,2)=SY%(X9%,2)+1:SY!(X9%,0)=SY!(X9%,0)+1:VR%(0)=NOT(SY!(X9%,0)>SY!(X9%,2)):IFNOTVR%(0)GOSUB60700
2032 RETURN'

        KBD GETC():
                A. BYTE-STREAM
2050 IFNOTX9%=-1RETURN
2052 IFSY%(4,0)GOSUB1900:VR%(0)=NOTVR$(0)=SY$(5,0):RETURN'
                B. TEXT-STREAM
2060 X9%=0:VR%(0)=0
2062 IFNOTSY%(0,2)>LEN(SY$(0,1))THEN2070
2064 LINEINPUTX9$:VR%(0)=NOTX9$=SY$(6,0):IFNOTVR%(0)RETURN
2066 SY$(0,1)=X9$+CHR$(13):SY%(0,2)=1:GOTO2062
2070 VR$(0)=MID$(SY$(0,1),SY%(0,2),1):SY%(0,2)=SY%(0,2)+1
2072 VR%(0)=NOTVR$(0)=SY$(6,0):IFNOTVR%(0)GOSUB60800
2078 RETURN'

        GETCHAR()

2100 VA%(0)=FNST%(SY%(1,0)):GOTO2000'

        PUTS() / PUTC() "EASY" VECTOR:

2200 GOTO60100'

        PUTCHAR() "EASY" VECTOR:

2300 GOTO60200'

        BASIC STRING SCAN

5000 VR%(0)=0:VR%(2)=0:FORX9%=VA%(0)TOVA%(1):IFFNXR%(VA%(2),INSTR(VA$(1),MID$(VA$(0),X9%,1))>0)THENVR%(2)=VR%(2)+1:NEXT
5002 VR%(1)=NOT(VA%(0)+VR%(2)>LEN(VA$(0))):RETURN'

        "SKIP WHILE"

5020 VA%(2)=0
5022 GOSUB5000:GOSUB5142:GOSUB5180:RETURN'

        "SKIP UNTIL"

5030 VA%(2)=-1:GOTO5022'

        "GATHER WHILE"

5040 VA%(2)=0
5042 GOSUB5000:VR%(0)=VR%(2)>0:RETURN'

        "GATHER UNTIL"

5050 VA%(2)=-1:GOTO5042'

        SAVE CURRENT ARGS & RETURNS

5100 SY%(13,0)=VA%(0):SY%(14,0)=VA%(1):SY%(12,0)=VR%(0):SY%(11,0)=VR%(1):SY%(15,0)=VR%(2):RETURN'

        RECOVER VA()S FROM SSVS

5120 FORX9%=0TO1:VA%(X9%)=SY%(13+X9%,0):NEXT:RETURN'

        UPDATE CC% TO NEW POS

5140 SY%(13,0)=SY%(13,0)+SY%(15,0):RETURN
5142 VA%(0)=VA%(0)+VR%(2):RETURN' UPDATE IN ARG STACK VERSION

        SET UP SSVS AFTER NEW VA$(0)

5160 SY%(14,0)=LEN(VA$(0)):SY%(11,0)=SY%(14,0)>0:SY%(13,0)=ABS(SY%(11,0)):GOSUB5120:RETURN'

        DETERMINE IF THERE'S "MORE TO SCAN"

5180 SY%(11,0)=SY%(13,0)<LEN(VA$(0)):IFNOTSY%(11,0)THENSY%(11,0)=NOT(INSTR(VA$(1),MID$(VA$(0),SY%(13,0),1))>0)
5182 RETURN'

        SAVE-SSVS()

5200 X5%=SY%(0,3):IFSY%>2THENRETURN'
        ROOM FOR ANOTHER SAVE:
5202 GOSUB5290' CALC OFFSET
5204 FORX4%=1TO5:SY%(X6%+X4%,3)=SY%(10+X4%,0):NEXT' SAVE SY%()S
5206 SY$(X5%,2)=VA$(0)' SAVE SR$
5207 SY%(0,3)=X5%+1' INC "SP"
5208 RETURN'

        RESTORE SSVS

5250 X5%=SY%(0,3)-1:IFSY%<0THENRETURN'
        STILL AT LEAST 1 SET TO POP:
5252 GOSUB5290' CALC OFFSET
5254 FORX4%=1TO5:SY%(10+X4%,0)=SY%(X6%+X4%,3):NEXT' RESTORE SY%()S
5256 VA$(0)=SY$(X5%,2)' RESTORE SR$
5257 SY%(0,3)=X5%' DEC "SP"
5258 RETURN'

        SUPPORT CALCS:

5290 X6%=SY%*5:RETURN' OFFSET INTO SY%(..,3)
5399 '
        RETURN-GATHERED()

5400 VR$(0)=MID$(VA$(0),VA%(0),VR%(2)):RETURN
5499 '
        SKIP-WS()

5500 VA$(1)=SY$(13,0):GOSUB5120:GOSUB5020:GOSUB5100:RETURN'

        NEXT-TOKEN()

5600 GOSUB5500:IFNOTSY%(11,0)THEN5680'

        BASIC GET-TOKEN()

5610 VR$(0)="":SY%(12,0)=0:GOSUB5120:GOSUB5050:GOSUB5100:IFSY%(12,0)THENVR$(0)=MID$(VA$(0),SY%(13,0),SY%(15,0))
5680 GOSUB5140:RETURN
5799 '
        STRING FORMATTING

        FMT-NUM() -- SP IN MIN WIDTH FIELD

5800 X9$=FNNP$(STR$(VA!(0))):VR$(0)=STRING$(FNMX%(LEN(X9$),VA%(1)),32):RSETVR$(0)=X9$:RETURN
9999 '
        DEVICE()

10000 VR%(0)=0
10010 IFNOT(INSTR(TK$,"CAS")>0ORINSTR(TK$,"TAP")>0)THEN10100'
        TAPE:
10020 GOSUB11000:IFVR%(0)THENF$(SN%)=VR$(0)' GET-CASSETTE-NUM()
10090 RETURN'
        PRINTER:
10100 IFNOT(INSTR(TK$,"PR")>0ORINSTR(TK$,"LP")>0)THEN10200
10110 F$(SN%)=STR$(FNPR%(0)):VR%(0)=-1
10190 RETURN'
        NULL (BIT BUCKET):
10200 IFNOTINSTR(TK$,"NUL")>0THEN10300
10210 F$(SN%)="0":VR%(0)=-1
10290 RETURN
10300 ' ANY FUTURE DEVICES:
10990 RETURN'

        GET-CASSETTE-NUM()

11000 GOSUB5200' SAVE-SSVS()
11010 VA$(0)=TK$:GOSUB5160' INIT-SCAN-STRING()
11020 VA$(1)="-012":GOSUB5030:GOSUB5040' SKIP-UNTIL( "-012"); GATHER-WHILE( "-012")
11025 'VR$(0)=MID$(VA$(0),VA%(0),VR%(2))
11027 GOSUB5400' RETURN-GATHERED()
11030 C%=ABS(VAL(VR$(0))):GOSUB5250' RESTORE-SSVS()
11040 VR%(0)=C%>0ANDC%<3:IFNOTVR%(0)THEN11090'
        TRANSLATE CASSETTE #S:
11050 VR$(0)=STR$(FNC1%(0)-C%+1)
11090 RETURN
19999 '
        INPUT-REDIRECT()

20000 SN%=1:GOSUB39900' INIT-F$()
20010 IFINSTR(TK$,"/DEV/")>0GOSUB10000:RETURN' DEVICE()
20020 F$(SN%)=MID$(TK$,2)
20090 VR%(0)=-1:RETURN
20999 '
        OUTPUT-REDIRECT()

21000 SN%=2' DEFAULT STREAM #

        1. APPEND?
21010 AP$="":IFINSTR(TK$,">>")>0THENAP$=" +"
21020 IFRP%<2THEN21100'
        2. STREAM REDIRECT?
21050 ST%=VAL(LEFT$(TK$,RP%-1))
21060 IFST%>1ANDST%<4THENSN%=ST%ELSERETURN'
        3. GET OUTPUT TOKEN
21100 GOSUB5200' SAVE-SSVS()
21110 TS$=TK$:VA$(0)=TK$:GOSUB5160' INIT-SCAN-STRING()
21120 VA$(1)=">":GOSUB5030:GOSUB5020' SKIP-UNTIL(), SKIP-WHILE( ">")
21130 VA$(1)=SY$(13,0):GOSUB5050' GATHER-UNTIL( " ")
21135 'VR$(0)=MID$(VA$(0),VA%(0),VR%(2))
21137 GOSUB5400' RETURN-GATHERED()
21140 TK$=VR$(0):SC%=VR%(0):GOSUB5250' RESTORE-SSVS()
        4. ANY OUTPUT TOKEN?
21150 IFNOTSC%THENTK$=TS$:VR%(0)=0:RETURN
21160 RS%=VAL(LEFT$(TK$,1))' "REDIRECT STREAM"
        5. OUTPUT TOKEN TYPE:
        5A. STREAM REDIRECT
21200 IFRS%>1ANDRS%<4THENF$(SN%)=STR$(RS%*100):VR%(0)=-1:RETURN'
        5B. DEVICE
21300 IFINSTR(TK$,"/DEV/")THENGOSUB10000:IFVR%(0)THENRETURNELSETK$=TS$:RETURN'
        5C. OUTPUT FILE
21400 F$(SN%)=TK$+AP$:VR%(0)=-1:RETURN
24999 '
        PRETTY-UP()

25000 CN$=TK$
25010 IFINSTR(TK$,"/")>0RETURN'
        FIRST, PARSE OUT ANY DRIVESPEC:
25020 GOSUB25100' SAVE-DRIVE-SPEC()
25030 CN$=CN$+"/BAS"+DS$
25090 RETURN'

        SAVE-DRIVE-SPEC()

25100 DS$=""
25110 DP%=INSTR(TK$,":"):IFDP%<1RETURN
25120 DS$=MID$(TK$,DP%,2):CN$=LEFT$(TK$,DP%-1)
25190 RETURN'

        BUILD-COMMAND-LINE()

26000 SP$="":IFLEN(F$(0))<>0THENSP$=" "
26010 F$(0)=F$(0)+SP$+TK$
26090 RETURN
29999 '
        GET-SH-LINE()

        FROM KEYBOARD IN THIS VERSION, 1 LINE ONLY

30000 PRINTPT$;" ";:LINEINPUTVA$(0):IFVA$(0)=""THEN30000
30010 GOSUB5160' INIT-SCAN-STRING()
30090 RETURN
30299 '
        BUILD-CMD-LINE-SH()

30300 CS$="CMDLINE/SH"+DR$' FOR NOW...
30390 RETURN
30499 '
        PARSE-TOKEN()

30500 RP%=INSTR(TK$,"<"):IFRP%<>1THEN30600'
        INPUT REDIRECTION:
30505 GOSUB20000' INPUT-REDIRECT()
30510 IFVR%(0)THENRETURNELSE31000
30600 RP%=INSTR(TK$,">"):IFRP%<1ORRP%>2THEN30700'
        OUTPUT REDIRECTION:
30605 GOSUB21000' OUTPUT-REDIRECT()
30610 IFVR%(0)THENRETURNELSE31000
30700 IFCN%THEN31000'
        NAME COMMAND:
30705 GOSUB25000' PRETTY-UP()
30710 CN%=-1
31000 GOSUB26000' BUILD-COMMAND-LINE()
31090 RETURN
37999 '
        DEBUGGING:

38000 FORX%=0TO3:PRINTF$(X%);":":NEXT:PRINTCN$;":":PRINT:RETURN
39899 '
        INIT-F$()

39900 F$(SN%)="":VR%(0)=0:RETURN
39998 '
        USER MAIN() (40000..59990):

39999 '
        INITIALIZATION:

40000 DIMF$(3),SS%(3)
40010 FORX9%=0TO3:F$(X9%)="":NEXT' INIT STD FILENAMES
40030 PT$="$"' PROMPT
40032 SN%=0' "STREAM NUMBER" (1..3 STDIN..OUT..ERR)
40034 RP%=0' "REDIRECT POSITION"
40040 DR$=":1":GOSUB30300' DEFAULT DRIVE FOR CMDLINE/SH. EDIT HERE IF SPECIFYING DRIVE FROM ARGV$()
40050 EO%=0' "EOF" FLAG (FOR FUTURE DEVELOPMENT)
40090 'STOP' FOR NOW...
40099 '
        WHILE (!EOF) --

40100 IFEO%THEN49000
40105 CL$="":CN$="":FORX9%=0TO3:F$(X9%)="":NEXT:CN%=0' RE-INIT COMMAND LINE, "COMMAND NAMED" FLAG
40110 GOSUB30000' GET-SH-LINE( VA$(0))
40199 '
                WHILE TK$= NEXT-TOKEN():

40200 GOSUB5600:IFNOTSY%(12,0)THEN48000' NO MORE
40210 TK$=VR$(0)' TOKEN$
40220 GOSUB30500' PARSE-TOKEN( TK$);
40230 GOTO40200
47998 '
        DONE:

47999 '
        1. BUILD OUTPUT ARRAY$

48000 '
48099 '
        2. OUTPUT CMDLINE/SH

48100 OPEN"O",1,CS$
48110 FORL%=0TO3:PRINT#1,F$(L%):NEXT
48190 CLOSE'

        3. RUN THE PROGRAM

48200 RUN CN$
59998 '
        SYSTEM SUPPORT ROUTINES (60000..64990):

59999 '
        SEARCHING

60000 FORX9%=11TO15:SY%(X9%,0)=0:NEXT:RETURN' INIT $TRING SEARCH PARAMS: 11-LC% 12-SE% 13-CC% 14-SS% 15-SL%
60009 '
        INIT CHAR SET IN SY$(SUB,0)
        VA%(0)  SUB
        VA$(0)  START CHAR
        VA$(1)  END CHAR

60010 X5%=VA%(0):X7%=ASC(VA$(0)):X8%=ASC(VA$(1)):X6%=X8%-X7%+1:SY$(X5%,0)=STRING$(X6%,32)' SET UP CHAR SET AS ALL BLANKS
60012 FORX9%=X7%TOX8%:X6%=X9%-X7%+1:MID$(SY$(X5%,0),X6%,1)=CHR$(X9%):NEXT:RETURN' FILL SY$(VA%(0),0) WITH CHARS FROM X7% TO X8%
60019 '
        FILL CHAR SETS SY$(9..13,0)

60020 VA%(0)=8:VA$(0)="0":VA$(1)="9":GOSUB60010' NUMERICS
60022 VA%(0)=9:VA$(0)="A":VA$(1)="Z":GOSUB60010' UC
60024 VA%(0)=10:VA$(0)="a":VA$(1)="z":GOSUB60010' lc
60026 SY$(11,0)=SY$(9,0)+SY$(10,0):SY$(12,0)=SY$(11,0)+SY$(8,0)' ALPHA, ALPHANUMERIC
60028 SY$(13,0)=" "+CHR$(10)' WS
60029 RETURN
60099 '
        OUTPUT ROUTINES:

        PUTS( FD%) / PUTC( FD%)

60100 X5%=VA%(0):IFX5%>0THENPRINT#VA%(0),VA$(0);:RETURN' WRITE TO DISK
60102 IFX5%=0RETURN' BIT BUCKET
60105 IFX5%=FNKY%(0)RETURN' KEYBOARD
60106 IFX5%=FNSC%(0)PRINTVA$(0);:RETURN' SCREEN
60107 IFX5%=FNPR%(0)LPRINTVA$(0);:RETURN' PRINTER
60108 RETURN' FOR NOW: INSERT TESTS FOR CAS1..2, RS-232 LATER

        PUTC()

60200 VA%(0)=FNST%(SY%(2,0)):GOTO60100'	

        PUTNUM( FD%, NUM, WIDTH%) -- PRINT NUM IN MIN WIDTH
                FIELD ON FILE%
        VA%(0)  FD#
        VA%(1)  WIDTH%
        VA!(0)  NUM

60300 GOSUB5800:VA$(0)=VR$(0):GOSUB60100:RETURN' PUTS( FMT-NUM( ))

        PUTDEC( NUM!, WIDTH%) -- PUTNUM() ON STDOUT

60350 VA%(0)=FNST%(SY%(2,0)):GOSUB60300:RETURN' PUTNUM( STDOUT)
60499 '
        FILE OPS:

        OPEN()

60500 VR%(0)=0:X9%=VA%(0):IFX9%<0THENRETURNELSEVA$(5)="OPEN"'

        DISK OPEN()
        1. ROOM FOR ANOTHER FILE?

60505 IFX9%>FNDN%(0)THENVA$(6)="NO ROOM":GOSUB60950:RETURN'

        2. INCREMENT OPEN FILE COUNT

60510 SY%(5,0)=SY%(5,0)+1:IFNOTX9%=0THEN60520'

        3. DO WE NEED TO HAVE A FD# ASSIGNED?
                CYCLE THRU FD#S, LOOKING FOR EMPTY SLOT

60512 FORX8%=1TOSY%(5,0):IFSY%(X8%,1)=0THENVA%(0)=X8%:GOTO60520
60514 NEXT:VA$(6)="NO ROOM TO OPEN":GOSUB60950:RETURN'

        4. DOES FD# MATCH AN ALREADY-OPEN FILE?

60520 IFFNDF%(SY%(VA%(0),1))THENVA$(6)="ALREADY IN USE":GOSUB60950:RETURN'

        5. CONFIRM "OPEN" MODE
                A. DOES VA%(1) CONTAIN VALID MODE?

60525 IFNOTFNDF%(VA%(1))THENVA%(1)=INSTR("IORGPA",CHR$(FNTU%(ASC(VA$(1)))))' CONVERT VA$(1) TO VA%(1)

                B. IS IT VALID NOW?

60530 IFNOTFNDF%(VA%(1))THENVA$(6)="NOT VALID 'OPEN' MODE":GOSUB60950:RETURN
60532 VR%(1)=VA%(0)' RETURN ASSIGNED FD#

        6. SET UP EXCEPTION IF FILE DOESN'T EXIST

60534 ONERRORGOTO65500
60536 'IFVR%(0)THENVA$(6)="DOES NOT EXIST":GOSUB60950:RETURN'

       7. OPEN THE FILE

60540 ONVA%(1)GOTO60610,60620,60630,60640,60650,60660:VA$(6)=STR$(VA%(1))+" IS NOT VALID OPEN MODE #":GOSUB60950:RETURN
60599 '
                7A. OPEN "I"

60610 OPEN"I",VA%(0),VA$(0):GOTO60700
60615 GOTO60690'
                7B. OPEN "O"

60620 OPEN"O",VA%(0),VA$(0):GOTO60700
60625 GOTO60690'
                7C. OPEN "R"

60630 OPEN"R",VA%(0),VA$(0):GOTO60700
60635 GOTO60690'
                7D. OPEN "G"

60640 IFSY%(4,0)THEN60630ELSE60610' BYTE STREAM:"r"; TEXT STREAM: "I"

                7E. OPEN "P"

60650 GOTO60620' USE "O"

                7F. OPEN "A"

60660 VA$(6)="'A'PPEND MODE NOT YET IMPLEMENTED":GOSUB60950
60690 VA$(6)="CAN'T OPEN IN MODE '";MID$("IORGPA");'":GOSUB60950:RETURN'

	        SET UP DEFAULT FILE PARAMS

60700 X9%=VA%(0):SY%(X9%,1)=VA%(1):SY!(X9%,0)=0:SY!(X9%,1)=1:SY!(X9%,2)=FNDX!(X9%):GOSUB60810' SET UP OPEN MODE, CHAR POS IN RECORD, CHAR COUNT, CHAR POS, TOTAL CHAR COUNT
60790 VR%(0)=-1:RETURN
60799 '
        KBD "RESET"

60800 SY$(0,1)="":SY%(0,2)=1:RETURN'

        DISK BUFFER "RESET"

60810 SY$(X9%,1)="":SY%(X9%,2)=256:RETURN' DISK BUFFER INPUT, CH POS
60899 '
        FILE ERRORS:

60949 '
        FILE OPEN ERROR RPT

60950 VA$(10)="ERROR: '"+VA$(0)+"'-"+VA$(5)+" "+VA$(6)+" IN"+STR$(X9%)
60952 VR%(0)=0
60954 GOSUB65520
60958 RETURN
62999 '
        I/O

63998 '
        INIT SUPPORT ROUTINES

63999 ' DEF FNS:

        1. CHAR & STRING

64000 DEFFNCL%(C%)=C%>&H60ANDC%<&H78:DEFFNTU%(C%)=C%+32*FNCL%(C%)' ISLOWER( C%); TOUPPER( C%)
64004 'DEFFNIC%(C$,S$)=INSTR(S$,C$)>0' T IF CHAR C$ IN SET S$
64006 DEFFNNM$(X)=SY$(8,0):DEFFNUC$(X)=SY$(9,0):DEFFNLC$(X)=SY$(10,0):DEFFNAL$(X)=SY$(9,0)+SY$(10,0):DEFFNAN$(X)=FNAL$(0)+FNNM$(0):DEFFNWS$(X)=SY$(13,0):DEFFNUS$(X)=SY$(14,0)' NUMERIC, UC, LC, ALPHA, ALPHANUMERIC, WHITESPACE, USER-DEFINED STRING
64009 '
        2. MATH, NUMBER TYPES & ADDRESSES

64010 DEFFNMX%(A%,B%)=(A%<B%)*-B%+(NOTA%<B%)*-A%:DEFFNMN%(A%,B%)=(A%<B%)*-A%+(NOTA%<B%)*-B%' MAX(), MIN()
64011 DEFFNXR%(A%,B%)=(A%ORB%)-(A%ANDB%):DEFFNLG%(N%)=NOT(N%=0):DEFFNMD!(S!,D!)=S!-INT(S!/D!)*D!' XOR; "LOGICAL" CONVERTS ALL NON-0 TO -1; S! MOD D!
64012 DEFFNSI%(S!)=-((S!>32767)*(S!-65536))-((S!<32768)*S!):DEFFNIS!(I%)=(I%<0)*-(65536+I%)+(NOTI%<0)*-I%' ADDR FUNCS: SP! -> SIGNED INT; SIGNED INT -> SP!
64014 DEFFNSW%(BL%,BH%)=CVI(CHR$(BL%)+CHR$(BH%)):DEFFNLB%(W!)=FNMD!(FNIS!(W!),256):DEFFNHB%(W!)=INT(FNIS!(W!)/256)' 2 BYTES -> INT; CONVERT WORD W! INTO LOW BYTE AND HIGH BYTE
64016 DEFFNWP!(A%)=FNIS!(FNSW%(PEEK(A%),PEEK(A%+1)))' "WORD PEEK": WORD VALUE AT A%, A%+1
64018 DEFFNNP$(S$)=MID$(S$,2+((LEFT$(S$,1))="-"),LEN(S$))' NP$()--REMOVE LEADING BLANKS FROM CONVERTED NUM
64019 '
        3. SYSTEM FNS

64020 DEFFNE4%(E%)=E%/2+1' ERROR CODE
64029 '
        4. DCB ADDRESS AND FILE INFO FNS

64030 DEFFND0%(X)=26303:DEFFND1%(X)=290' BASE DCB ADDRESS; SIZE OF DCB+BUFFER; DEFAULTS TO TRSDOS 2.3 FOR mODEL I. EDIT FOR OTHER DOS & MODEL
64031 '         D0      D1
TRSDOS 1.3 M3   26182   360
NEWDOS 2.1 M1   25941   290
NEWDOS/80  M1   26315   301
LDOS 5.0.3 M1   27205   546

64032 DEFFNDB%(F%)=FND0%(0)+FND1%(0)*(F%-1):DEFFNDC%(F%)=FNDB%(F%)+5:DEFFNDL%(F%)=FNDB%(F%)+8:DEFFNDE%(F%)=FNDB%(F%)+12' DB: DCB ADDR; DC: ADDR OF OFFSET IN CURRENT REC; DL: IN LAST REC; DE: END REC
64034 DEFFNDN%(X)=PEEK(&H408E)' MAX NUMBER OF FILES, TRSDOS 2.3 MODEL I
64036 DEFFNDE!(F%)=FNWP!(FNDE%(F%)):DEFFNDQ%(F%)=((PEEK(FNDL%(F%))=0)*-256)+(NOTPEEK(FNDL%(F%))=0)*-PEEK(FNDL%(F%)):DEFFNDX!(F%)=FNDQ%(F%)+256*(FNDE!(F%)-1)' DX: BYTE COUNT; USES DE! AND DQ! TO DETERMINE
64038 DEFFNDF%(M%)=M%>0ANDM%<7' IS M% A VALID OPEN() MODE?
64040 DEFFNST%(SL%)=ABS(SL%>99)*SY%(ABS(INT(SL%/100)),0)+ABS(SL%<100)*SL%' STD SLOT TRANSLATION
64049 '
        5. DEVICE CONSTANTS

64050 DEFFNC1%(X)=-4:DEFFNC2%(X)=-5:DEFFNKY%(X)=-1:DEFFNPR%(X)=-3:DEFFNRS%(X)=-6:DEFFNSC%(X)=-2' CAS 1, CAS 2, KEYBOARD, PRINTER, RS-232, SCREEN
64090 RETURN
64499 '
        INITIALIZE SYSTEM VALUES

64500 SY%(1,0)=FNKY%(0):SY%(2,0)=FNSC%(0):SY%(3,0)=FNSC%(0)' DEFAULT DEVS FOR STDIN, STDOUT, STDERR
64502 SY$(15,0)="SH/SH"' SEQ FILE CONTAINING DIRECTIONS FOR SH/BAS
64504 SY$(4,0)=CHR$(13):SY$(5,0)=CHR$(27):SY$(6,0)="."' NL, EOF CHARS
64508 RETURN
64999 '
        ** INITIALIZATION (65000..65529) **

65000 SS%=500' "STRING SPACE" IN BYTES
65002 CLEARSS%
65004 X9%=15' "LENGTH" OF SYSTEM ARRAYS
65006 DIMSY%(X9%,3),SY!(X9%,2),SY$(X9%,2)
65008 D0%=1' SYSTEM-WIDE DEBUG FLAG
65020 GOSUB65050' INITIALIZE
65022 'KILL"CMDLINE/SH"' FOR SH USE ONLY!
65048 GOTO40000'

        * INIT SCHEDULER *

65050 GOSUB65100' INIT VALUES
65052 'GOSUB65150' INIT CMD LINE
65054 GOSUB65200' USER PROGRAM INIT
65056 GOSUB65250' INIT STD FILES
65058 GOSUB65300' OPTIONAL PACKAGES
65098 RETURN'

        INIT-VALS() -- INITIALIZE STD DEVS, DEF FNS

65100 GOSUB60000' INIT SEARCH STATE VARS
65102 GOSUB60800' KBD RESET
65104 GOSUB64000' DEF FNS, CONSTANTS
65106 GOSUB64500' INIT I/O VALUES
65112 GOSUB60020' CHAR SETS
65148 RETURN'

        INIT-CMDLINE() -- READ CMDLINE/SH,
                        PARSE CMD LINE & PROGRAM NAME,
                        ARGC, ARGV

65149 '
        1. TRY TO READ "CMDLINE/SH"

65150 VR%(0)=0:ONERRORGOTO65500
65152 OPEN"I",1,SY$(15,0)
65154 ONERRORGOTO0'

        2. IF CMDLINE FILE EXISTS:

65156 IFVR%(0)THENVR%(0)=0:RETURN' NO IT DOESN'T

        3. READ SY$(0..3,0)

65158 FORX9%=0TO3:INPUT#1,SY$(X9%,0):NEXT:CLOSE#1'

        4. PARSE CMD LINE IN SY$(0..,0) INTO AV$(0..)
                ARGC -> SY%(0,0)

        4A. PROGRAM NAME -> AV$(0)

65160 SY%(0,0)=0:VA$(0)=SY$(0,0):GOSUB5160:IFNOTSY%(11,0)RETURN
65161 GOSUB5160:GOSUB5600:IFNOTSY%(12,0)RETURN
65162 AV$(0)=VR$(0)'

        4B. ARGS -> AV$(1..N)

65170 GOSUB5600:IFNOTSY%(12,0)RETURN
65172 SY%(0,0)=SY%(0,0)+1:AV$(SY%(0,0))=VR$(0):IFSY%(11,0)THEN65170
65174 RETURN
65198 '

        USER-PROGRAM-INIT() -- USER ARGV -OPTION DECODING

65200 ' SYSTEM -OPTION DECODING HERE

        USER CAN ACCESS ARGC / SY%(0,0) AND
                ARGV() / AV$(0)..AV$(ARGC)
                AS NEEDED IN THEIR PROGRAM

65248 RETURN'

        INIT-STD-FILES() -- STDIN, STDOUT, STDERR REDIRECT

65250 VR%(0)=0:FORX7%=1TO3:IFLEN(SY$(X7%,0))<1THEN65290' ONLY ATTEMPT TO OPEN NAMED FILES
65252 IFX7%=1THENSY%(4,0)=-1' DEFAULT BYTE-STREAM INPUT FOR STDIN FILE
65254 IFINSTR(SY$(X7%,0),"-")>0THENVR%(1)=VAL(SY$(X7%,0)):GOTO65280' I/O REASSIGNED
65255 X6%=VAL(SY$(X7%,0)):IFX6%>99THENVR%(1)=X6%:GOTO65280' STD SLOT RE-ASSIGNED (IE, "3>2", WHERE X7%=3=STDERR IS ENCODED AS "200")
65256 VA$(1)=MID$("GPO",X7%,1):VA%(1)=0:VA$(0)=SY$(X7%,0):VA%(0)=0
65257 X9%=INSTR(VA$(0),"+"):IFX9%THENVA$(0)=LEFT$(VA$(0),X9%-1):VA$(1)="A"' STDOUT/ERR APPEND MODE SIGNIFIED BY "+" AFTER FILENAME
65258 GOSUB60500
65280 SY%(X7%,0)=VR%(1)' ASSIGN FD# TO STD FILE#
65290 NEXT:RETURN
65298 RETURN'

        OPTIONAL PACKAGES

65300 '
65498 RETURN'

        * ERROR HANDLING:
        *

65499 '
        * FILE NOT FOUND ERROR HANDLER *

65500 VR%(0)=FNE4%(ERR)=54:IFVR%(0)THENRESUMENEXT
65502 ONERRORGOTO0
65504 RESUME
65519 '
        ERROR REPORTING:

        PUTERR() -- WRITE MSG TO ERROR DEV/FILE

65520 VA%(0)=FNST%(SY%(3,0)):IFVA%(0)=0THENVA%(0)=-2' DEFAULT REPORT TO SCREEN IF STDERR NOT ASSIGNED
65522 VA$(0)=VA$(10)+CHR$(13):GOSUB60100:RETURN
